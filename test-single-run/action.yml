name: 'Run test'
description: |-
  Execute single test.

  The test should be specified as a directory path via 'test-directory' parameter.

inputs:
  folder-id:
    required: true
    description: |-
      ID of a folder in Yandex Cloud.

  auth-key-json-base64:
    required: false # true, if auth-key-json is not set
    description: |-
      BASE64 encoded authorized key string in JSON format. This setting is preferred over `auth-key-json`.

      The action will perform all operations on behalf of a service account for which this authorized key was generated.

      Given a json file, encode it via command line `base64 <authorized_key.json >authorized_key.pem` and add the content of result file to GitHub secrets.
      
  auth-key-json:
    required: false # true, if auth-key-json-base64 is not set
    default: ''
    description: |-
      Use 'auth-key-json-base64'.

      An authorized key string in JSON format.

      The use of this parameter is discouraged because it can lead to unwanted logs obfuscation (see [naming your secrets](https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions#naming-your-secrets)).

  action-log-level:
    type: string
    default: NOTICE
    options: [NOTICE, INFO, DEBUG]
    description: |-
      Action log level.

  data-bucket:
    type: string
    default: ''
    description: |-
      Bucket used as a proxy storage to send arbitrary test data needed for test execution to agent.

      **WARNING**:
      CI service account (authorized via auth-key-json(-base64)) must be able to upload data to this bucket

      **WARNING2**:
      agent service account must be able to download data from this bucket.

  artifacts-bucket:
    type: string
    default: ''
    description: |-
      Bucket to store artifacts generated by agent during test execution.

      **WARNING**:
      agent service account must be able to upload data to this bucket.

  test-directory:
    required: true
    type: string
    description: |-
      A path to a directory containing test configuration files.

  agent-filter:
    type: string
    default: 'labels.workflow=${{ github.run_id }}'
    description: |-
      A filter expression to select agents to execute tests.

      Example:
        - 'name contains github' - agents with 'github' substring in name.
        - 'labels.workflow=$WORKFLOW_ID' - agents with label 'workflow' equals to $WORKFLOW_ID

  add-description:
    type: string
    default: "Run from GitHub Actions"
    description: |-
      Specified string will be added to description of created tests.

  add-labels:
    type: string
    default: "ci=github"
    description: |-
      Specified labels will be added to label set of created tests. Format: 'key1=value1,key2=value2'.

outputs:
  test-id:
    value: ${{ steps.output-id.outputs.res }}
    description: |-
      ID of performed test.

  test-info:
    value: ${{ steps.output-info.outputs.res }}
    description: |-
      JSON object with information about performed test.

  report-file:
    value: ${{ steps.output-report-file.outputs.res }}
    description: |-
      Path to generated .md report file.

  artifacts-dir:
    value: ${{ steps.make-artifacts-dir.outputs.res }}
    description: |-
      Action artifacts directory. If needed, save it using actions/upload_artifacts.

runs:
  using: "composite"
  steps:
    - id: setup
      name: setup
      shell: bash
      env:
        YC_LT_AUTHORIZED_KEY_JSON: '${{ inputs.auth-key-json }}'
        YC_LT_AUTHORIZED_KEY_JSON_BASE64: '${{ inputs.auth-key-json-base64 }}'
        YC_LT_FOLDER_ID: '${{ inputs.folder-id }}'
      run: |
        $GITHUB_ACTION_PATH/../yc-setup/setup.sh

    - id: make-artifacts-dir
      name: make artifacts directory
      shell: bash
      run: |
        _OUT_DIR="${{ runner.temp }}/${{ github.job }}-$((RANDOM))"
        mkdir -p "$_OUT_DIR" || true
        echo "res=$_OUT_DIR" >> "$GITHUB_OUTPUT"

    - id: run
      name: run
      shell: bash
      env:
        YC_LT_DATA_BUCKET: '${{ inputs.data-bucket }}'
        YC_LT_ARTIFACTS_BUCKET: '${{ inputs.artifacts-bucket }}'

        YC_LT_TEST_AGENT_FILTER: '${{ inputs.agent-filter }}'
        YC_LT_TEST_EXTRA_DESCRIPTION: '${{ inputs.add-description }}'
        YC_LT_TEST_EXTRA_LABELS: '${{ inputs.add-labels }}'

        YC_LT_LOG_LEVEL: '${{ inputs.action-log-level }}'
        YC_LT_OUTPUT_DIR: '${{ steps.make-artifacts-dir.outputs.res }}'
        YC_LT_CLI_INTERACTIVE: 0

      run: |
        OUT_FILE="${{ steps.make-artifacts-dir.outputs.res }}/run-out.json"
        echo "out_file=$OUT_FILE" >> "$GITHUB_OUTPUT"
        ERROR_FILE="${{ steps.make-artifacts-dir.outputs.res }}/run-error.txt"
        echo "error_file=$ERROR_FILE" >> "$GITHUB_OUTPUT"

        touch "$ERROR_FILE" "$OUT_FILE"

        $GITHUB_ACTION_PATH/../_impl/test_run.sh "${{ inputs.test-directory }}" -e "$ERROR_FILE" -o "$OUT_FILE"

    - id: output-id
      name: add test id to outputs
      if: always()
      shell: bash
      run: |
        {
          echo 'res<<EOF'
          jq -r '.id // ""' < "${{ steps.run.outputs.out_file }}"
          echo 'EOF'
        } >> "$GITHUB_OUTPUT"

    - id: output-info
      name: add test info to outputs
      if: always()
      shell: bash
      run: |
        if [[ -z "${{ steps.output-id.outputs.res }}" ]]; then
          echo "res='{}'" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        {
          echo 'res<<EOF'
          yc loadtesting test get "${{ steps.output-id.outputs.res }}" --format json
          echo 'EOF'
        } >> "$GITHUB_OUTPUT"

    - id: output-report-file
      name: generate report file and add path to outputs
      if: always()
      shell: bash
      run: |
        REPORT_FILE="${{ steps.make-artifacts-dir.outputs.res }}/report.md"
        echo "res=$REPORT_FILE" >> "$GITHUB_OUTPUT"
        touch "$REPORT_FILE"

        $GITHUB_ACTION_PATH/../_impl/test_make_execution_report.sh -t \
          "${{ inputs.test-directory }}" \
          "${{ steps.output-id.outputs.res }}" \
          "${{ steps.run.outputs.error_file }}" \
          > "$REPORT_FILE"

    - id: summary
      name: generate summary
      if: always()
      shell: bash
      run: |
        cat "${{ steps.output-report-file.outputs.res }}" >> "$GITHUB_STEP_SUMMARY"
