name: 'Run test suite'
description: |-
  Execute and assess multiple tests one-by-one in a single action.

  Tests should be defined as a whitespace-separated list of directory paths via 'test-directories' parameter.

inputs:
  auth-key-json:
    required: false
    description: |-
      An authorized key string in JSON format.

      NOTE: to prevent some actions output issues, it is highly recommended to use base64 encoded version.

  auth-key-json-base64:
    required: false
    description: |-
      BASE64 encoded authorized key string in JSON format.

      Given a json file, encode it via command line `base64 <authorized_key.json >authorized_key.pem`
      and add the content of result file to GitHub secrets.

  folder-id:
    required: true
    description: |-
      ID of a folder in Yandex Cloud.

  data-bucket:
    default: ""
    description: |-
      Bucket used as a proxy storage to send arbitrary test data needed for test execution to agent.

      WARNING: CI service account (authorized via auth-key-json(-base64)) must be able to upload data to this bucket
      WARNING2: agent service account must be able to download data from this bucket.

  artifacts-bucket:
    default: ""
    description: |-
      Bucket to store artifacts generated by agent during test execution.

      WARNING: agent service account must be able to upload data to this bucket.

  test-directories:
    type: string
    required: true
    description: |-
      A whitespace-separated list of directory paths containing test configuration files.

  agent-filter:
    type: string
    default: ""
    description: |-
      A filter expression to select agents to execute tests.

      Example:
        - 'name contains github' - agents with 'github' substring in name.
        - 'labels.workflow=$WORKFLOW_ID' - agents with label 'workflow' equals to $WORKFLOW_ID

  add-description:
    type: string
    default: "Run from GitHub Actions"
    description: |-
      Specified string will be added to description of created tests.

  add-labels:
    type: string
    default: "ci=github"
    description: |-
      Specified labels will be added to label set of created tests. Format: 'key1=value1,key2=value2'.

  action-log-level:
    type: string
    default: NOTICE
    options:
      - NOTICE
      - INFO
      - DEBUG
    description: |-
      Action log level.

outputs:
  test-ids:
    value: ${{ steps.output-ids.outputs.res }}
    description: |-
      IDs of performed tests.

  test-infos:
    value: ${{ steps.output-infos.outputs.res }}
    description: |-
      JSON array of objects with information about performed tests.

  execution-report-file:
    value: ${{ steps.run.outputs.report_execution_file }}
    description: |-
      Path to generated .md execution report file.

  checks-report-file:
    value: ${{ steps.run.outputs.report_checks_file }}
    description: |-
      Path to generated .md checks report file.

  artifacts-dir:
    value: ${{ steps.make-artifacts-dir.outputs.res }}
    description: |-
      Action artifacts directory. If needed, save it using actions/upload_artifacts.

runs:
  using: "composite"
  steps:
    - id: setup
      name: setup
      shell: bash
      env:
        YC_LT_AUTHORIZED_KEY_JSON: '${{ inputs.auth-key-json }}'
        YC_LT_AUTHORIZED_KEY_JSON_BASE64: '${{ inputs.auth-key-json-base64 }}'
        YC_LT_FOLDER_ID: '${{ inputs.folder-id }}'
      run: |
        $GITHUB_ACTION_PATH/../yc-setup/setup.sh

    - id: make-artifacts-dir
      name: make artifacts directory
      shell: bash
      run: |
        _OUT_DIR="${{ runner.temp }}/${{ github.job }}-$((RANDOM))"
        mkdir -p "$_OUT_DIR" || true
        echo "res=$_OUT_DIR" >> "$GITHUB_OUTPUT"

    - id: run
      name: run
      shell: bash
      env:
        YC_LT_DATA_BUCKET: '${{ inputs.data-bucket }}'
        YC_LT_ARTIFACTS_BUCKET: '${{ inputs.artifacts-bucket }}'

        YC_LT_TEST_AGENT_FILTER: '${{ inputs.agent-filter }}'
        YC_LT_TEST_EXTRA_DESCRIPTION: '${{ inputs.add-description }}'
        YC_LT_TEST_EXTRA_LABELS: '${{ inputs.add-labels }}'

        YC_LT_LOG_LEVEL: '${{ inputs.action-log-level }}'
        YC_LT_OUTPUT_DIR: '${{ steps.make-artifacts-dir.outputs.res }}'
        YC_LT_CLI_INTERACTIVE: 0
      run: |
        set -e

        OUT_FILE="${{ steps.make-artifacts-dir.outputs.res }}/run-out.json"
        echo "out_file=$OUT_FILE" >> "$GITHUB_OUTPUT"
        ERROR_FILE="${{ steps.make-artifacts-dir.outputs.res }}/run-error.txt"
        echo "error_file=$ERROR_FILE" >> "$GITHUB_OUTPUT"
        REPORT_EXECUTION_FILE="${{ steps.make-artifacts-dir.outputs.res }}/execution.md"
        echo "report_execution_file=$REPORT_EXECUTION_FILE" >> "$GITHUB_OUTPUT"
        REPORT_CHECKS_FILE="${{ steps.make-artifacts-dir.outputs.res }}/checks.md"
        echo "report_checks_file=$REPORT_CHECKS_FILE" >> "$GITHUB_OUTPUT"

        touch "$OUT_FILE" "$ERROR_FILE" "$REPORT_EXECUTION_FILE" "$REPORT_CHECKS_FILE"

        _TEST_DIRS=()
        read -d '' -ra _TEST_DIRS <<< "${{ inputs.test-directories }}" || true
        $GITHUB_ACTION_PATH/../_impl/test.sh \
          -o "$OUT_FILE" \
          -e "$ERROR_FILE" \
          --out-report-execution "$REPORT_EXECUTION_FILE" \
          --out-report-checks "$REPORT_CHECKS_FILE" \
          "${_TEST_DIRS[@]}"

    - id: output-ids
      name: add test ids to outputs
      if: always()
      shell: bash
      run: |
        {
          echo 'res<<EOF'
          jq -r '[.[].id // ""] | join("\n")' < "${{ steps.run.outputs.out_file }}"
          echo 'EOF'
        } >> "$GITHUB_OUTPUT"

    - id: output-infos
      name: add test infos to outputs
      if: always()
      shell: bash
      run: |
        if [[ -z "${{ steps.output-ids.outputs.res }}" ]]; then
          echo "res='[]'" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        _ARGS=()
        read -d '' -ra _ARGS <<< "${{ steps.output-ids.outputs.res }}" || true
        {
          echo 'res<<EOF'
          yc loadtesting test get "${_ARGS[@]}" --format json
          echo 'EOF'
        } >> "$GITHUB_OUTPUT"

    - id: summary
      name: generate summary
      if: always()
      shell: bash
      run: |
        cat "${{ steps.run.outputs.report_execution_file }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        cat "${{ steps.run.outputs.report_checks_file }}" >> $GITHUB_STEP_SUMMARY
